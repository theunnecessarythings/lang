impl i64 {
    fn add(self: Self, other: Self) Self {
        return @mlir_op("arith.addi", [self, other], {}, ["i64"]);
    }

    fn sub(self: Self, other: Self) Self {
        return @mlir_op("arith.subi", [self, other], {}, ["i64"]);
    }

    fn mul(self: Self, other: Self) Self {
        return @mlir_op("arith.muli", [self, other], {}, ["i64"]);
    }

    fn div(self: Self, other: Self) Self {
        return @mlir_op("arith.divsi", [self, other], {}, ["i64"]);
    }

    fn less_equal(self: Self, other: Self) bool {
        return @mlir_op("arith.cmpi", [self, other], {predicate: "2: i64"}, ["i1"]);
    }

    fn greater_than(self: Self, other: Self) bool {
        return @mlir_op("arith.cmpi", [self, other], {predicate: "4: i64"}, ["i1"]);
    }

    fn equal(self: Self, other: Self) bool {
        return @mlir_op("arith.cmpi", [self, other], {predicate: "0: i64"}, ["i1"]);
    }

    fn bitwise_and(self: Self, other: Self) Self {
        return @mlir_op("arith.andi", [self, other], {}, ["i64"]);
    }

    fn bitwise_or(self: Self, other: Self) Self {
        return @mlir_op("arith.ori", [self, other], {}, ["i64"]);
    }

    fn bitwise_xor(self: Self, other: Self) Self {
        return @mlir_op("arith.xori", [self, other], {}, ["i64"]);
    }

    fn bitwise_shl(self: Self, other: Self) Self {
        return @mlir_op("arith.shli", [self, other], {}, ["i64"]);
    }

    fn bitwise_shr(self: Self, other: Self) Self {
        return @mlir_op("arith.shrsi", [self, other], {}, ["i64"]);
    }

    fn neg(self: Self) Self {
        return @mlir_op("arith.muli", [self, @mlir_attr("-1: i64")], {}, ["i64"]);
    }
}
