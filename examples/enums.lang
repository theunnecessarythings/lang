// Create an `enum` to classify a web event. Note how both
// names and type information together specify the enum:
// `PageLoad != PageUnload` and `KeyPress(char) != Paste(String)`.
// Each is different and independent.
enum WebEvent {
    // An `enum` variant may either be `unit-like`,
    PageLoad,
    PageUnload,
    // like tuple structs,
    KeyPress(char),
    Paste(String),
    // or c-like structures.
    Click { x: i64, y: i64 },
}

// A function which takes a `WebEvent` enum as an argument and
// returns nothing.
fn inspect(event: WebEvent) void {
    match event {
        is .PageLoad => print("page loaded"),
        is .PageUnload => print("page unloaded"),
        // Destructure `c` from inside the `enum` variant.
        is .KeyPress(c) => print("pressed '{}'.", c),
        is .Paste(s) =>  print("pasted \"{}\".", s),
        // Destructure `Click` into `x` and `y`.
        is .Click {x, y}  => {
            print("clicked at x={}, y={}.", x, y);
        },
    }
}

fn main() void {
    const pressed = WebEvent.KeyPress('x');
    const pasted  = WebEvent.Paste("my text");
    const load    = WebEvent.PageLoad;
    const unload  = WebEvent.PageUnload;

    inspect(pressed);
    inspect(pasted);
    inspect(click);
    inspect(load);
    inspect(unload);
}
