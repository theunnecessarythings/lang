// `Pair` owns resources: two heap allocated integers
struct Pair(Box, Box)
// TODO: This is not the behavior we expect, but will come back to it later
impl Pair {
    fn destroy(self: Self) void {
        // Destructure `self`
        const Pair {first, second} = self;

        print("Destroying Pair({}, {})", first, second);

        // `first` and `second` go out of scope and get freed
    }
}

fn main() void {
    const rectange = Rectangle(p1=Point.origin(), p2=Point(3.0, 4.0));

    // Methods are called using the dot operator
    // Note that the first argument `self` is implicitly passed, i.e.
    // `rectangle.perimeter()` === `Rectangle.perimeter(rectangle)`
    print("Rectangle perimeter: {}", rectangle.perimeter());
    print("Rectangle area: {}", rectangle.area());

    var square = Rectangle(p1=Point.origin(), p2=Point(1.0, 1.0));

    // Error! `rectangle` is immutable, but this method requires a mutable
    // object
    //rectangle.translate(1.0, 0.0)
    // TODO ^ Try uncommenting this line

    // Okay! Mutable objects can call mutable methods
    square.translate(1.0, 1.0);

    const pair = Pair(Box.new(1), Box.new(2));
    pair.destroy();

}
