fn main() void {
    const triple = (0, -2, 3);
    // TODO ^ Try different values for `triple`

    print("Tell me about {}", triple);
    // Match can be used to destructure a tuple
    match triple {
        // Destructure the second and third elements
        is (0, y, z) => print("First is `0`, `y` is {}, and `z` is {}", y, z),
        is (1, ..)  => print("First is `1` and the rest doesn't matter"),
        is (.., 2)  => print("last is `2` and the rest doesn't matter"),
        is (3, .., 4)  => print("First is `3`, last is `4`, and the rest doesn't matter"),
        // `..` can be used to ignore the rest of the tuple
        is _      => print("It doesn't matter what they are"),
    }
}

fn main2() void {
    // Try changing the values in the array, or make it a slice!
    const array = [1, -2, 6];

    match array {
        // Binds the second and the third elements to the respective variables
        is [0, second, third] =>
            print("array[0] = 0, array[1] = {}, array[2] = {}", second, third),

        // Single values can be ignored with _
        is [1, _, third] => print(
            "array[0] = 1, array[2] = {} and array[1] was ignored",
            third
        ),

        // You can also bind some and ignore the rest
        is [-1, second, ..] => print(
            "array[0] = -1, array[1] = {} and all the other ones were ignored",
            second
        ),
        // The code below would not compile
        // [-1, second] => ...

        // Or store them in another array/slice (the type depends on
        // that of the value that is being matched against)
        is [3, second, .. as tail] => print(
            "array[0] = 3, array[1] = {} and the other elements were {}",
            second, tail
        ),

        // Combining these patterns, we can, for example, bind the first and
        // last values, and store the rest of them in a single array
        is [first, .. as middle, last] => print(
            "array[0] = {}, middle = {}, array[2] = {}",
            first, middle, last
        ),
    }
}

