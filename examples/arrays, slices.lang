// import "std/mem";

// This function borrows a slice.
// fn analyze_slice(slice: []i32) void {
//     print("First element of the slice: {}", slice[0]);
//     // print("The slice has {} elements", slice.len());
// }

fn main() void {
    // Fixed-size array (type signature is superfluous).
    // const xs: [5]i64 = [1, 2, 3, 4, 5];
    const xs: array(i64, 5, *) = [1, 2, 3, 4, 5];
    const ys: array(i64, 5, *) = [12, 13, 14, 15, 16];

    // const zs: array(i64, *) = [1, 2, 3, 4, 5];

    // All elements can be initialized to the same value.
    // const zs: [500]i32 = [0] ** 500;

    // Indexing starts at 0.
    print("First element of the array: %d", xs[0]);
    print("Second element of the array: %d", xs[1]);
    print("Last element of the second array: %d", ys[ys.len() - 1]);

    // `len` returns the count of elements in the array.
    print("Number of elements in array: %d", xs.len());

    // Arrays are stack allocated.
    // print("Array occupies {} bytes", mem.size_of_val(xs));

    // Arrays can be automatically borrowed as slices.
    // print("Borrow the whole array as a slice.");
    // analyze_slice(xs);
    //
    // // Slices can point to a section of an array.
    // // They are of the form [starting_index..ending_index].
    // // `starting_index` is the first position in the slice.
    // // `ending_index` is one more than the last position in the slice.
    // print("Borrow a section of the array as a slice.");
    // analyze_slice(ys[1..4]);
    //
    // // Example of empty slice `[]`:
    // const empty_array: [0]u32 = [];
    // assert_eq(empty_array, []);
    // assert_eq(empty_array, [][..]); // Same but more verbose
    //
    // // Arrays can be safely accessed using `.get`, which returns an
    // // `Option`. This can be matched as shown below, or used with
    // // `.expect()` if you would like the program to exit with a nice
    // // message instead of happily continue.
    // for i in 0..=xs.len() { // Oops, one element too far!
    //     match xs.get(i) {
    //         is .Some(xval) => print("{}: {}", i, xval),
    //         is .None => print("Slow down! {} is too far!", i),
    //     }
    // }

    // Out of bound indexing on array causes compile time error.
    //print("{}", xs[5]);
    // Out of bound indexing on slice causes runtime error.
    //print("{}", xs[..][5]);
}
