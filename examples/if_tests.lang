impl i64 {
    fn equal(self: Self, other: Self) bool {
        return @mlir_op("arith.cmpi", [self, other], {predicate: "0: i64"}, ["i1"]);
    }
}

// fn test_non_terminal_if() void {
//     const a = 1;
//     if a == 1 {
//     }
// }
//
// fn test_non_terminal_if_else() void {
//     const a = 1;
//     if a == 1 {
//         print("a is 1");
//     } else {
//         print("a is not 1");
//     }
// }
//
// fn test_if_returns() i64 {
//     const a = 1;
//     if a == 1 {
//         return 1;
//     } else {
//         return 0;
//     }
// }

// fn test_if_returns_no_else() i64 {
//     const a = 1;
//     if a == 3 {
//         return 420;
//     }
//     return 63463;
// }

// fn test_if_returns_else_no_return() i64 {
//     const a = 1;
//     if a == 1 {
//         return 1;
//     } else {
//         print("a is not 1");
//     }
//     return 0;
// }

// fn test_if_expr() void {
//     const a = 1;
//     const b = if a == 1 {
//         1
//     } else {
//         0
//     }; 
// }

// fn test_if_else_if() void {
//     const a = 1;
//     if a == 1 {
//         print("a is 1");
//     } else if a == 2 {
//         print("a is 2");
//     } else {
//         print("a is not 1 or 2");
//     }
// }

fn test_if_else_if_returns() i64 {
    const a = 20;
    if a == 30 {
        return 40;
    } else if a == 50 {
        return 60;
    } else {
        return 70;
    }
}

// fn test_if_yield() i64 {
//     const a = 1;
//     const b = if a == 1 {
//         yield 1;
//     } else {
//         yield 0;
//     };
//     return b;
// }


// pub fn main() void {
//     test_non_terminal_if();
//     test_non_terminal_if_else();
//     test_if_returns();
//     test_if_returns_no_else();
//     test_if_returns_else_no_return();
//     test_if_expr();
//     test_if_else_if();
//     test_if_else_if_returns();
//     test_if_yield();
// }

