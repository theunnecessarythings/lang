import "std/builtin/int";

struct A {
    a: @mlir_type("i64"),
}

impl A {
    fn init(mut self: Self, other: Self) Self {
        self = other;
        return self;
    }

    // fn init(mut self: Self) Self {
    //     self.a = @mlir_attr("42: i64");
    //     return self;
    // }
}

fn test_a(arg0: i64, arg1: i64) void {
    print("arg0 -> %d", arg0);
    print("arg1 -> %d", arg1);
}

fn test_a(arg0: f64, arg1: f64) void {
    print("arg0 -> %f", arg0);
    print("arg1 -> %f", arg1);
}

pub fn main() void {
    const a = 1;

    const ba: @mlir_type("vector<4xf64>") = @mlir_attr("dense<[10.9, 20.0, 30.1, 40.1]> : vector<4xf64>");
    const z: @mlir_type("i32") = 2;
    const c: @mlir_type("i64") = @mlir_attr("42");
    const d: @mlir_type("!lang.typevalue<i32>") = @mlir_type("i32");
    const e: d = 2304;
    const f: A = A(e);
    const g: i32 = f.a;
    const h: @mlir_type("tensor<2x3xf32>") = @mlir_attr("dense<[[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]]> : tensor<2x3xf32>");
    const bc : i64 = 2;

    const i: @mlir_type("!lang.string") = "Hello, World!";
    print("Hello, World! -> %s", i);

    const int_literal = 32342;
    print("int_literal -> %d", int_literal);
 
    const b: A = A(42);
    print("b -> %d", b.a);
    
    test_a(314, 42);
    test_a(3.14, 42.0);
    // const ab: @mlir_type("!lang.int_literal") = 42;
}

fn empty() void {}
